{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1yDpd5kNzHSEoFFNruWSB3RXVMl5YL6gA","timestamp":1725126622012}],"authorship_tag":"ABX9TyNF23n3r6jYn72Zdf6AiRBW"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Getting Familiar with Pandas"],"metadata":{"id":"fS4FkuZjdXWG"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# Create a Series\n","s = pd.Series([1, 2, 3, 4])\n","print(s)\n","# Create a DataFrame from a dictionary\n","data = {'A': [1, 2, 3], 'B': [4, 5, 6]}\n","df = pd.DataFrame(data)\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U4nYQG0jdp96","executionInfo":{"status":"ok","timestamp":1725125338763,"user_tz":-330,"elapsed":698,"user":{"displayName":"Sasank Kurmana","userId":"14905696810311942924"}},"outputId":"a68a54b0-dbfe-448a-d304-056c8c92314d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0    1\n","1    2\n","2    3\n","3    4\n","dtype: int64\n","   A  B\n","0  1  4\n","1  2  5\n","2  3  6\n"]}]},{"cell_type":"code","source":["#Creating DataFrames and Series:\n","\n","#From lists:\n","df_from_list = pd.DataFrame([['a', 1], ['b', 2]], columns=['Letter', 'Number'])\n","#From dictionaries:\n","df_from_dict = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})"],"metadata":{"id":"oDDz_22le6r_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Common Operations:\n","\n","#Selecting data:\n","df['A']  # Select column 'A'\n","df.loc[0]  # Select row by index\n","#Filtering rows:\n","df[df['A'] > 1]  # Filter rows where column 'A' > 1\n","#Modifying data:\n","df['A'] = df['A'] * 2  # Double the values in column 'A'"],"metadata":{"id":"hEMehMnqfubT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Data Handling with Pandas"],"metadata":{"id":"dvYYNes4gFRs"}},{"cell_type":"code","source":["\n","import pandas as pd\n","\n","# Reading data from a CSV file\n","df = pd.read_csv('data.csv')\n","\n","# Handling missing data\n","df.fillna(0, inplace=True)  # Replace NaN with 0\n","df.dropna(inplace=True)  # Drop rows with NaN\n","\n","# Removing duplicates\n","df.drop_duplicates(inplace=True)\n","\n","# Data type conversions\n","df['column_name'] = df['column_name'].astype(int)"],"metadata":{"id":"OEgRDJ6TimXM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Data Cleaning and Preprocessing"],"metadata":{"id":"J_teK--1ioQJ"}},{"cell_type":"code","source":["Handling Missing Values:\n","df.fillna(method='ffill', inplace=True)  # Forward fill\n","df.fillna(method='bfill', inplace=True)  # Backward fill\n","#Removing Duplicates:\n","df.drop_duplicates(subset=['column_name'], keep='first', inplace=True)\n","#Data Type Conversion:\n","df['column_name'] = df['column_name'].astype(float)"],"metadata":{"id":"g3Imj9LnjChM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Data Analysis with Pandas"],"metadata":{"id":"TH-Od5EnjHnE"}},{"cell_type":"code","source":["#Generating Summary Statistics:\n","df.describe()  # Get summary statistics\n","#Grouping Data:\n","grouped = df.groupby('column_name').mean()  # Group by column_name and calculate mean\n","Merging, Joining, and Concatenating DataFrames:\n","\n","#Merging:\n","df1 = pd.DataFrame({'key': ['A', 'B'], 'value': [1, 2]})\n","df2 = pd.DataFrame({'key': ['A', 'C'], 'value': [3, 4]})\n","merged_df = pd.merge(df1, df2, on='key', how='inner')\n","#Joining:\n","df1 = pd.DataFrame({'A': [1, 2]}, index=['A', 'B'])\n","df2 = pd.DataFrame({'B': [3, 4]}, index=['A', 'C'])\n","joined_df = df1.join(df2)\n","#Concatenating:\n","df1 = pd.DataFrame({'A': [1, 2]})\n","df2 = pd.DataFrame({'B': [3, 4]})\n","concatenated_df = pd.concat([df1, df2], axis=1)"],"metadata":{"id":"5vDyKj3PjIkE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"76UI8JT6jkFP"}},{"cell_type":"markdown","source":["Application in Data Science\n","Advantages of Pandas:\n","\n","Efficient Data Manipulation: Provides powerful and flexible data structures for data manipulation and analysis.\n","Integrated with Other Libraries: Works seamlessly with NumPy, SciPy, and other scientific computing libraries.\n","Data Cleaning: Offers numerous methods for cleaning and preparing data, which is crucial for accurate analysis.\n","Ease of Use: Provides intuitive data handling and querying capabilities compared to traditional Python data structures.\n","Real-World Examples:\n","\n","Data Cleaning: Removing duplicates, handling missing values, and normalizing data for consistency.\n","Exploratory Data Analysis (EDA): Summarizing data distributions, exploring relationships between variables, and visualizing data."],"metadata":{"id":"R3ZERODcjpHq"}}]}